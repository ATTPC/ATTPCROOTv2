if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset "${Esc}[m")
  set(ColourBold  "${Esc}[1m")
  set(Red         "${Esc}[31m")
  set(Green       "${Esc}[32m")
  set(Yellow      "${Esc}[33m")
  set(Blue        "${Esc}[34m")
  set(Magenta     "${Esc}[35m")
  set(Cyan        "${Esc}[36m")
  set(White       "${Esc}[37m")
  set(BoldRed     "${Esc}[1;31m")
  set(BoldGreen   "${Esc}[1;32m")
  set(BoldYellow  "${Esc}[1;33m")
  set(BoldBlue    "${Esc}[1;34m")
  set(BoldMagenta "${Esc}[1;35m")
  set(BoldCyan    "${Esc}[1;36m")
  set(BoldWhite   "${Esc}[1;37m")
endif()

function(pad str width char out)
  cmake_parse_arguments(ARGS "LEFT" "COLOR" "" ${ARGN})
  string(LENGTH ${str} length)
  if(ARGS_COLOR)
    math(EXPR padding "${width}-(${length}-10*${ARGS_COLOR})")
  else()
    math(EXPR padding "${width}-${length}")
  endif()
  if(padding GREATER 0)
    foreach(i RANGE ${padding})
      if(ARGS_LEFT)
        set(str "${char}${str}")
      else()
        set(str "${str}${char}")
      endif()
    endforeach()
  endif()
  set(${out} ${str} PARENT_SCOPE)
endfunction()

function(PrintSummary)

  #Print out version of project and C++ standard used
  message(STATUS "  ")
  message(STATUS "  ${Cyan}Compiling ${PROJECT_NAME} Version ${PROJECT_VERSION}${ColourReset}")
  if(CMAKE_CXX_FLAGS)
    message(STATUS "  ")
    message(STATUS "  ${Cyan}GLOBAL CXX FLAGS${CR}  ${BGreen}${CMAKE_CXX_FLAGS}${ColourReset}")
  endif()
  if(CMAKE_CXX_STANDARD)
    message(STATUS "  ")
    message(STATUS "  ${Cyan}GLOBAL CXX STANDARD${CR}  ${BGreen}c++${CMAKE_CXX_STANDARD}${CR}")
  endif()

  # Print out summary of possible configuration types
  if(CMAKE_CONFIGURATION_TYPES)
    message(STATUS "  ")
    message(STATUS "  ${Cyan}BUILD TYPE         CXX FLAGS$${ColourReset}")
    string(TOUPPER "${CMAKE_BUILD_TYPE}" selected_type)
    foreach(type IN LISTS CMAKE_CONFIGURATION_TYPES)
      string(TOUPPER "${type}" type_upper)
      if(type_upper STREQUAL selected_type)
	pad("${type}" 18 " " type_padded)
	message(STATUS "${BGreen}* ${type_padded}${CMAKE_CXX_FLAGS_${type_upper}}${ColourReset}")
      else()
	pad("${type}" 18 " " type_padded)
	message(STATUS "  ${BWhite}${type_padded}${CR}${CMAKE_CXX_FLAGS_${type_upper}}")
      endif()
      unset(type_padded)
      unset(type_upper)
    endforeach()
    message(STATUS "  ")
    message(STATUS "  (Change the build type with ${BMagenta}-DCMAKE_BUILD_TYPE=...${ColourReset})")
  endif()

  # Print out all of the dependencies and their locations
  if(PROJECT_PACKAGE_DEPENDENCIES)
    message(STATUS "  ")
    message(STATUS "  ${Cyan}DEPENDENCY FOUND     VERSION                   PREFIX${CR}")
    foreach(dep IN LISTS PROJECT_PACKAGE_DEPENDENCIES)

      if(${dep}_VERSION)
	if(${dep} STREQUAL Boost)
          if(Boost_VERSIONg_MAJOR)
            set(version_str "${BGreen}${${dep}_VERSION_MAJOR}.${${dep}_VERSION_MINOR}${CR}")
          else()
            set(version_str "${BGreen}${${dep}_MAJOR_VERSION}.${${dep}_MINOR_VERSION}${CR}")
          endif()
	else()
          set(version_str "${BGreen}${${dep}_VERSION}${CR}")
	endif()
      else()
	set(version_str "${BYellow}unknown${CR}")
      endif()
      
      if(PROJECT_${dep}_VERSION)
	set(version_req_str " (>= ${PROJECT_${dep}_VERSION})")
      endif()
      pad(${dep} 20 " " dep_padded)

      if(DISABLE_COLOR)
	pad("${version_str}${version_req_str}" 25 " " version_padded)
      else()
	pad("${version_str}${version_req_str}" 25 " " version_padded COLOR 1)
      endif()

      set(prefix ${${dep}_PREFIX})

      # Search through and get the library locations
      if(${dep} STREQUAL Boost)
	if(TARGET Boost::headers)
          get_target_property(boost_include Boost::headers INTERFACE_INCLUDE_DIRECTORIES)
	else()
          get_target_property(boost_include Boost::boost INTERFACE_INCLUDE_DIRECTORIES)
	endif()
	get_filename_component(prefix ${boost_include}/.. ABSOLUTE)
      elseif(${dep} STREQUAL Pythia6)
	get_target_property(pythia_loc Pythia6 LOCATION)
	get_filename_component(prefix ${pythia_loc}/../.. ABSOLUTE)
      elseif(${dep} STREQUAL Pythia8)
	get_target_property(pythia_loc Pythia8 LOCATION)
	get_filename_component(prefix ${pythia_loc}/../.. ABSOLUTE)
      elseif(${dep} STREQUAL FairLogger)
	if(FairLogger_PREFIX)
          set(prefix ${FairLogger_PREFIX})
	else()
          set(prefix ${FairLogger_ROOT})
	endif()
      elseif(${dep} STREQUAL FairMQ)
	if(FairMQ_PREFIX)
          set(prefix ${FairMQ_PREFIX})
	else()
          set(prefix ${FairMQ_ROOT})
	endif()
      elseif(${dep} STREQUAL Geant4VMC)
	string(REPLACE ":" ";" geant4vmc_include ${Geant4VMC_INCLUDE_DIRS})
	list(GET geant4vmc_include 0 geant4vmc_include)
	get_filename_component(prefix ${geant4vmc_include}/../.. ABSOLUTE)
      elseif(${dep} STREQUAL Geant3)
	get_target_property(geant3_include geant321 INTERFACE_INCLUDE_DIRECTORIES)
	string(REPLACE ":" ";" geant3_include ${geant3_include})
	list(GET geant3_include 0 geant3_include)
	get_filename_component(prefix ${geant3_include}/../.. ABSOLUTE)
      elseif(${dep} STREQUAL Geant4)
	list(GET Geant4_INCLUDE_DIRS 0 geant4_include)
	get_filename_component(prefix ${geant4_include}/../.. ABSOLUTE)
      elseif(${dep} STREQUAL VGM)
	string(REPLACE ":" ";" vgm_include ${VGM_INCLUDE_DIRS})
	list(GET vgm_include 0 vgm_include)
	get_filename_component(prefix ${vgm_include}/.. ABSOLUTE)
      elseif(${dep} STREQUAL ROOT)
	get_target_property(root_include ROOT::Core INTERFACE_INCLUDE_DIRECTORIES)
	list(GET root_include 0 root_include)
	get_filename_component(prefix ${root_include}/.. ABSOLUTE)
	set(prefix ${root_include})
      elseif(${dep} STREQUAL VMC)
	get_target_property(vmc_include VMCLibrary INTERFACE_INCLUDE_DIRECTORIES)
	get_filename_component(prefix ${vmc_include} ABSOLUTE)
      elseif(${dep} STREQUAL HDF5)
	get_target_property(hdf5_include hdf5::hdf5-shared INTERFACE_INCLUDE_DIRECTORIES)
	list(GET hdf5_include 0 hdf5_include)
	get_filename_component(prefix ${hdf5_include}/.. ABSOLUTE)
      elseif(${dep} STREQUAL PCL)
	#string(REPLACE ":" ";" pcl_include ${PCL_INCLUDE_DIRS})
	list(GET pcl_include 0 PCL_INCLUDE_DIRS)
	get_filename_component(prefix "${pcl_include}" ABSOLUTE)
      elseif(${dep} STREQUAL Eigen3)
	get_target_property(eigen_include Eigen3::Eigen INTERFACE_INCLUDE_DIRECTORIES)
	list(GET eigen_include 0 eigen_include)
	get_filename_component(prefix ${eigen_include}/.. ABSOLUTE)
      elseif(${dep} STREQUAL FLANN)
	get_filename_component(prefix ${FLANN_INCLUDE_DIR}/.. ABSOLUTE)
      elseif(${dep} STREQUAL GENFIT2)
	get_filename_component(prefix ${GENFIT2_INCLUDE_DIR}/.. ABSOLUTE)
      elseif(${dep} STREQUAL CLHEP)
	get_filename_component(prefix ${CLHEP_INCLUDE_DIR}/.. ABSOLUTE) 
      elseif(${dep} STREQUAL HEPMC)
	get_filename_component(prefix ${HEPMC_INCLUDE_DIR}/.. ABSOLUTE)
      elseif(${dep} STREQUAL OpenMP)
	get_filename_component(prefix "${OPENMP_CXX_INCLUDE_DIRS}/.." ABSOLUTE)
      elseif(${dep} STREQUAL HiRAEVT)
	get_target_property(hiraevt_include HTMappers INTERFACE_INCLUDE_DIRECTORIES)
	list(GET hiraevt_include 0 hiraevt_include)
	get_filename_component(prefix ${hiraevt_include}/.. ABSOLUTE)
      elseif(${dep} STREQUAL FairRoot)
	get_filename_component(prefix "${FAIRROOT_LIBRARY_DIR}/.." ABSOLUTE)
      endif()
      
      message(STATUS "  ${BWhite}${dep_padded}${CR}${version_padded}${prefix}")

      if(${dep} STREQUAL Geant3)
	message(STATUS "                                          G3SYS: ${Geant3_SYSTEM_DIR}")
      endif()
      if(${dep} STREQUAL Geant4)
	foreach(dataset IN LISTS Geant4_DATASETS)
          pad(${Geant4_DATASET_${dataset}_ENVVAR} 20 " " envvar_padded LEFT)
          message(STATUS "                          ${envvar_padded}: ${Geant4_DATASET_${dataset}_PATH}")
	endforeach()
      endif()

      unset(version_str)
      unset(version_padded)
      unset(version_req_str)
    endforeach()
  endif()

  message(STATUS "")
  message(STATUS "Searched for cmake config files in : ${CMAKE_PREFIX_PATH}")

endfunction()
