 ################################################################################
 #    Copyright (C) 2014 GSI Helmholtzzentrum fuer Schwerionenforschung GmbH    #
 #                                                                              #
 #              This software is distributed under the terms of the             #
 #              GNU Lesser General Public Licence (LGPL) version 3,             #
 #                  copied verbatim in the file "LICENSE"                       #
 ################################################################################
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_ROOT ROOT::Core)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_Geant3 geant321)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_Geant4 G4run)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_Geant4VMC geant4vmc)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_VMC ROOT::VMV)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_Pythia6 Pythia6)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_Pythia8 Pythia8)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_VGM VGM::BaseVGM)
set_property(GLOBAL APPEND PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_FairRoot FairRoot::Base)

macro(fairroot_remove_system_paths path_var)
  set(__excluded_system_prefixes)
  list(APPEND __excluded_system_prefixes
    ${CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES}
    /bin
    /usr/bin)
  list(REMOVE_DUPLICATES __excluded_system_prefixes)

  list(JOIN __excluded_system_prefixes "|" __excluded_system_prefixes)
  set(__excluded_system_prefixes "^(${__excluded_system_prefixes})")

  set(__tmp ${${path_var}})
  set(${path_var})
  foreach(dir IN LISTS __tmp)
    if(NOT dir MATCHES ${__excluded_system_prefixes})
      list(APPEND ${path_var} ${dir})
    endif()
  endforeach()
  unset(__tmp)
  unset(__excluded_system_prefixes)
endmacro()

# Gets confog from global list at top of mopdule
function(fairroot_get_root_config_library_targets pkg)
  cmake_parse_arguments(ARGS "" "OUTVAR" "" ${ARGN})
  if(NOT ARGS_OUTVAR)
    set(ARGS_OUTVAR ROOT_CONFIG_LIBRARY_TARGETS)
  endif()

  set(${ARGS_OUTVAR})
  get_property(tgts GLOBAL PROPERTY ROOT_CONFIG_LIBRARY_TARGETS_${pkg})
  foreach(tgt IN LISTS tgts)
    if(TARGET ${tgt})
      list(APPEND ${ARGS_OUTVAR} ${tgt})
    endif()
  endforeach()

  set(${ARGS_OUTVAR} ${${ARGS_OUTVAR}} PARENT_SCOPE)
endfunction()

### Generate config 
function(fairroot_generate_config_sh file)
  cmake_parse_arguments(ARGS "BUILD;INSTALL" "VMCWORKDIR" "DEPENDENCIES;PATH" ${ARGN})

  file(WRITE ${file} "#!/bin/bash\n# Generated by ${PROJECT_NAME} ${PROJECT_GIT_VERSION}\n")

  if(ARGS_BUILD AND ARGS_INSTALL)
    message(FATAL_ERROR "BUILD and INSTALL are mutually exclusive")
  endif()

  # Turn dependecy names into targets we can pull interface info from
  list(APPEND ARGS_DEPENDENCIES ${PROJECT_NAME})
  foreach(dep IN LISTS ARGS_DEPENDENCIES)
    fairroot_get_root_config_library_targets(${dep} OUTVAR targets)
    if(targets)
      list(APPEND target_deps ${targets})
    endif()
  endforeach()

  if(ARGS_BUILD)
    add_library(config_sh_build_interface INTERFACE)
    target_link_libraries(config_sh_build_interface INTERFACE ${target_deps})
  else()
    add_library(config_sh_install_interface INTERFACE)
    target_link_libraries(config_sh_install_interface INTERFACE ${target_deps})
  endif()

  # Add to LD_LIBRARY_PATH for each imported target
  unset(ld_library_path)
  foreach(target_dep IN LISTS target_deps)
    get_property(imported TARGET ${target_dep} PROPERTY IMPORTED)
    if(imported)
      get_property(ld_path TARGET ${target_dep} PROPERTY LOCATION)
      get_filename_component(ld_path ${ld_path} DIRECTORY)
      list(APPEND ld_library_path ${ld_path})
    endif()
  endforeach()

  if(ARGS_BUILD)
    list(APPEND ld_library_path "${CMAKE_BINARY_DIR}/lib")
  else()
    get_filename_component(absLibPath ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}
      ABSOLUTE BASE_DIR "${CMAKE_BINARY_DIR}")
    list(APPEND ld_library_path "${absLibPath}")
  endif()
  
  if(ld_library_path)
    list(REMOVE_DUPLICATES ld_library_path)
    file(TO_NATIVE_PATH "${ld_library_path}" ld_library_path)
    string(REPLACE ";" ":" ld_library_path "${ld_library_path}")
    if(APPLE)
      file(APPEND ${file} "export DYLD_LIBRARY_PATH=\"${ld_library_path}:\$DYLD_LIBRARY_PATH\"\n")
    else()
      file(APPEND ${file} "export LD_LIBRARY_PATH=\"${ld_library_path}:\$LD_LIBRARY_PATH\"\n")
    endif()
  endif()

  # path
  if(ARGS_PATH)
    fairroot_remove_system_paths(ARGS_PATH)
    file(TO_NATIVE_PATH "${ARGS_PATH}" path)
    string(REPLACE ";" ":" path "${path}")
    file(APPEND ${file} "export PATH=\"${path}:\$PATH\"\n")
  endif()

  # data dirs
  foreach(dep IN LISTS ARGS_DEPENDENCIES)
    if(dep STREQUAL Geant4)
      geant4_generate_data_config(OUTVAR Geant4_DATA_CONFIG_SH)
      file(APPEND ${file} "${Geant4_DATA_CONFIG_SH}")
    elseif(dep STREQUAL Geant3)
      file(APPEND ${file} "export G3SYS=\"${Geant3_SYSTEM_DIR}\"\n")
    elseif(dep STREQUAL Pythia8)
      file(APPEND ${file} "export PYTHIA8DATA=\"${Pythia8_DATA}\"\n")
    elseif(dep STREQUAL ROOT)
      get_filename_component(ROOT_PREFIX ${ROOT_BINARY_DIR}/.. ABSOLUTE)
      file(APPEND ${file} "export ROOTSYS=\"${ROOT_PREFIX}\"\n")
    endif()
  endforeach()
  if(ARGS_VMCWORKDIR)
    file(APPEND ${file} "export VMCWORKDIR=\"${ARGS_VMCWORKDIR}\"\n")
  endif()


  set(rgenfile ${file}.gen_root_include_path)
  if(ARGS_BUILD)
    file(GENERATE OUTPUT ${rgenfile} CONTENT
      "export ROOT_INCLUDE_PATH=\"$<JOIN:$<REMOVE_DUPLICATES:$<TARGET_PROPERTY:config_sh_build_interface,INTERFACE_INCLUDE_DIRECTORIES>>,:>:${CMAKE_BINARY_DIR}/include:$ROOT_INCLUDE_PATH\"\n")
  else()
    get_filename_component(absInclude ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}
      ABSOLUTE BASE_DIR "${CMAKE_BINARY_DIR}")
    file(GENERATE OUTPUT ${rgenfile} CONTENT
      "export ROOT_INCLUDE_PATH=\"$<JOIN:$<REMOVE_DUPLICATES:$<TARGET_PROPERTY:config_sh_install_interface,INTERFACE_INCLUDE_DIRECTORIES>>,:>:${absInclude}:$ROOT_INCLUDE_PATH\"\n")
  endif()

  if(ARGS_BUILD)
    add_custom_target(update_root_include_path_build_interface ALL
      sed -i '/^export ROOT_INCLUDE_PATH=/d' ${file}
      COMMAND cat ${rgenfile} >> ${file}
      DEPENDS ${file} ${rgenfile})
  else()
    add_custom_target(update_root_include_path_install_interface ALL
      sed -i '/^export ROOT_INCLUDE_PATH=/d' ${file}
      COMMAND cat ${rgenfile} >> ${file}
      DEPENDS ${file} ${rgenfile})
  endif()    
  
endfunction()
